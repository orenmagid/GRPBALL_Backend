"use strict";

var errors = require('./errors');

var StreamObjectStore = function StreamObjectStore() {
  this.initialize.apply(this, arguments);
};

StreamObjectStore.prototype = {
  initialize: function initialize(client, name, token) {
    /**
     * Initialize a feed object
     * @method intialize
     * @memberof StreamObjectStore.prototype
     * @param {StreamCloudClient} client Stream client this collection is constructed from
     * @param {string} name ObjectStore name
     * @param {string} token JWT token
     * @example new StreamObjectStore(client, "food", "eyJhbGciOiJIUzI1...")
     */
    this.client = client;
    this.collection = name;
    this.token = token;
    this.signature = this.collection + ' ' + this.token;
  },
  buildURL: function buildURL(itemId) {
    var url = 'object_store/' + this.collection + '/';

    if (itemId === undefined) {
      return url;
    }

    return url + itemId + '/';
  },
  object: function object(itemId, itemData) {
    return new StreamObject(this, itemId, itemData);
  },
  items: function items(options, callback) {
    /**
     * get all items from collection
     * @method items
     * @memberof StreamObjectStore.prototype
     * @param  {object}   options  {limit:}
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.get()
     * @example collection.get({limit:100})
     */
    return this.client.get({
      url: this.buildURL(),
      signature: this.signature
    }, callback);
  },
  get: function get(itemId, callback) {
    /**
     * get item from collection
     * @method get
     * @memberof StreamObjectStore.prototype
     * @param  {object}   itemId  ObjectStore object id
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.get("0c7db91c-67f9-11e8-bcd9-fe00a9219401")
     */
    return this.client.get({
      url: this.buildURL(itemId),
      signature: this.signature
    }, callback);
  },
  add: function add(itemId, itemData, callback) {
    /**
     * Add item to collection
     * @method add
     * @memberof StreamObjectStore.prototype
     * @param  {string}   itemId  ObjectStore id
     * @param  {object}   itemData  ObjectStore data
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.add("cheese101", {"name": "cheese burger","toppings": "cheese"})
     */
    if (itemId === null) {
      itemId = undefined;
    }

    var body = {
      id: itemId,
      data: itemData
    };
    return this.client.post({
      url: this.buildURL(),
      body: body,
      signature: this.signature
    }, callback);
  },
  update: function update(itemId, objectData, callback) {
    /**
     * Update item in the object storage
     * @method update
     * @memberof StreamObjectStore.prototype
     * @param  {object}   itemId  ObjectStore object id
     * @param  {object}   objectData  ObjectStore data
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example store.update("0c7db91c-67f9-11e8-bcd9-fe00a9219401", {"name": "cheese burger","toppings": "cheese"})
     * @example store.update("cheese101", {"name": "cheese burger","toppings": "cheese"})
     */
    var body = {
      data: objectData
    };
    return this.client.put({
      url: this.buildURL(itemId),
      body: body,
      signature: this.signature
    }, callback);
  },
  delete: function _delete(itemId, callback) {
    /**
     * Delete item from collection
     * @method delete
     * @memberof StreamObjectStore.prototype
     * @param  {object}   itemId  ObjectStore object id
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.delete("cheese101")
     */
    return this.client['delete']({
      url: this.buildURL(itemId),
      signature: this.signature
    }, callback);
  }
};

var StreamObject = function StreamObject() {
  this.initialize.apply(this, arguments);
};

StreamObject.prototype = {
  initialize: function initialize(store, id, data) {
    this.collection = store.collection;
    this.store = store;
    this.id = id;
    this.data = data;
  },
  _streamRef: function _streamRef() {
    return "SO:".concat(this.collection, ":").concat(this.id);
  },
  get: function get(callback) {
    var _this = this;

    /**
     * get item from collection and sync data
     * @method get
     * @memberof StreamObjectStore.prototype
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.get("0c7db91c-67f9-11e8-bcd9-fe00a9219401")
     */
    return this.store.get(this.id).then(function (response) {
      _this.data = response.data;
      _this.full = response;

      if (callback) {
        callback(response);
      }

      return response;
    });
  },
  add: function add(callback) {
    var _this2 = this;

    /**
     * Add item to collection
     * @method add
     * @memberof StreamObjectStore.prototype
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.add("cheese101", {"name": "cheese burger","toppings": "cheese"})
     */
    return this.store.add(this.id, this.data).then(function (response) {
      _this2.data = response.data;
      _this2.full = response;

      if (callback) {
        callback(response);
      }

      return response;
    });
  },
  update: function update(callback) {
    var _this3 = this;

    /**
     * Update item in the object storage
     * @method update
     * @memberof StreamObjectStore.prototype
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example store.update("0c7db91c-67f9-11e8-bcd9-fe00a9219401", {"name": "cheese burger","toppings": "cheese"})
     * @example store.update("cheese101", {"name": "cheese burger","toppings": "cheese"})
     */
    return this.store.update(this.id, this.data).then(function (response) {
      _this3.data = response.data;
      _this3.full = response;

      if (callback) {
        callback(response);
      }

      return response;
    });
  },
  delete: function _delete(callback) {
    var _this4 = this;

    /**
     * Delete item from collection
     * @method delete
     * @memberof StreamObjectStore.prototype
     * @param  {requestCallback} callback Callback to call on completion
     * @return {Promise} Promise object
     * @example collection.delete("cheese101")
     */
    return this.store.delete(this.id).then(function (response) {
      _this4.data = null;
      _this4.full = null;

      if (callback) {
        callback(response);
      }

      return response;
    });
  }
};
module.exports = StreamObjectStore;